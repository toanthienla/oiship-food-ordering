package utils.test;

import java.sql.*;
import org.mindrot.jbcrypt.BCrypt;

public class ResetAdminPassword {

    public static void main(String[] args) {
        String dbURL = "jdbc:sqlserver://localhost:1433;databaseName=Oiship;encrypt=false";
        String username = "sa"; // Thay b·∫±ng username SQL Server c·ªßa b·∫°n
        String password = "123456"; // Thay b·∫±ng password SQL Server c·ªßa b·∫°n

        try (Connection conn = DriverManager.getConnection(dbURL, username, password)) {
            // K·∫øt n·ªëi Database
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            System.out.println("‚úÖ Connected to DB");

            // Reset admin
            resetAccount(conn, "oiship.team@gmail.com", "admin", "Admin", "admin", "0000000001");
            // Reset staff
            resetAccount(conn, "staff@example.com", "staff", "Staff", "staff", "0000000002");

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private static void resetAccount(Connection conn, String email, String plainPassword, String fullName, String role, String phone) throws SQLException {
        // BƒÉm m·∫≠t kh·∫©u
        String hashedPassword = BCrypt.hashpw(plainPassword, BCrypt.gensalt(12));
        System.out.println("üîí [" + fullName + "] New Hash for '" + plainPassword + "': " + hashedPassword);

        // Th·ª≠ update m·∫≠t kh·∫©u
        String updateSql = "UPDATE Account SET [password] = ? WHERE email = ?"; // Lo·∫°i b·ªè [status]
        try (PreparedStatement stmt = conn.prepareStatement(updateSql)) {
            stmt.setString(1, hashedPassword);
            stmt.setString(2, email);
            int rowsUpdated = stmt.executeUpdate();

            if (rowsUpdated > 0) {
                System.out.println("‚úÖ C·∫≠p nh·∫≠t m·∫≠t kh·∫©u cho " + fullName + " th√†nh c√¥ng!");
                System.out.println("_____________________________________________________");
            } else {
                System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n " + fullName + " v·ªõi email: " + email + ". Ti·∫øn h√†nh insert...");
                System.out.println("___________________________________________________________________________________________");

                // Insert t√†i kho·∫£n m·ªõi
                String insertSql = "INSERT INTO Account (fullName, email, phone, [password], [address], [status], [role], createAt) " +
                        "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                try (PreparedStatement insertStmt = conn.prepareStatement(insertSql)) {
                    insertStmt.setString(1, fullName);
                    insertStmt.setString(2, email);
                    insertStmt.setString(3, phone);
                    insertStmt.setString(4, hashedPassword);
                    insertStmt.setString(5, "No address provided"); // Gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ address
                    insertStmt.setInt(6, 1); // Status active
                    insertStmt.setString(7, role);
                    insertStmt.setTimestamp(8, new Timestamp(System.currentTimeMillis()));

                    int rowsInserted = insertStmt.executeUpdate();
                    if (rowsInserted > 0) {
                        System.out.println("‚úÖ Insert t√†i kho·∫£n " + fullName + " th√†nh c√¥ng!");
                        System.out.println("_____________________________________________________");
                    } else {
                        System.out.println("‚ùå Insert t√†i kho·∫£n " + fullName + " th·∫•t b·∫°i!");
                        System.out.println("_____________________________________________________");
                    }
                }
            }
        } catch (SQLException e) {
            System.err.println("‚ùå L·ªói khi x·ª≠ l√Ω t√†i kho·∫£n " + fullName + ": " + e.getMessage());
            e.printStackTrace();
        }
    }
}